5.  Write  a  function  to  find  out  height  of  binary  tree.



#include<stdio.h>
#include<conio.h>
#include<malloc.h>
struct tree
{
 char info;
 struct tree *left;
 struct tree *right;
}*root,*p;
typedef struct tree T;
void insert(T *r,T *q)
{char ch;
 printf("\n Insert at left or right(L/R)? : ");
 fflush(stdin);
 ch=getchar();
 if(ch=='l' || ch=='L')
 {
  if(r->left==NULL)
  r->left=q;
  else
  insert(r->left,q);
 }
 else
 {
  if(r->right==NULL)
  r->right=q;
  else
  insert(r->right,q);
 }
}

void inorder(T *r)
{
 if(r!=NULL)
 {
  inorder(r->left);
  printf("\t%c",r->info);
  inorder(r->right);
 }
}

int height(T *ptr)
{  int hl=0,hr=0;
	if(ptr->left!=NULL)
	hl=height(ptr->left);
	if(ptr->right!=NULL)
	hr=height(ptr->right);
	if(hl>hr)
	return(hl+1);
	else
	return(hr+1);
}

void main()
{
 char ch;
 clrscr();
 root=NULL;
 do{
  p=(T*)malloc(sizeof(T));
  p->left=NULL;
  p->right=NULL;
  printf("Enter the info : ");
  fflush(stdin);
  scanf("%c",&p->info);
  if(root==NULL)
  root=p;
  else
  insert(root,p);
  printf("\n Do you want another node?(y/n):");
  fflush(stdin);
  ch=getchar();
 }while(ch!='n');
 inorder(root);
 printf("\n Height of tree:%d",height(root));
 getch();
}
