11. Write  a  program  to  implement  linked  list  representation  &  traversing  (BFS,  DFS)  of Graph.



//C program to implement the Graph Traversal 
//(a) Breadth first traversal 
//(b) Depth first traversal 

#include<stdio.h>
#include<stdlib.h>
struct link
{struct node *next;
 struct link *adj;
 };
struct node
{int data,status;
 struct node *next;
 struct link *adj;
 };
struct node *start,*p,*q;
struct link *l,*k;

void create()
{
int dat,flag=0;
dat=1;
start=NULL;
printf("\n Enter the nodes in the graph(0 to end): ");
while(dat)
{scanf("%d",&dat);
 if(dat==0)
 break;
 p=(struct node*)malloc(sizeof(struct node));
 p->data=dat;
 p->status=0;
 p->next=NULL;
 p->adj=NULL;
 if(flag==0)
 {start=p;
  q=p;
  flag++;
   }
 else
 {q->next=p;
  q=p;
   }
}
p=start;
while(p!=NULL)
{printf("\n Enter the links to %d (0 to end) : ",p->data);
 flag=0;
 while(1)
 {scanf("%d",&dat);
  if(dat==0)
  break;
  k=(struct link*)malloc(sizeof(struct link));
  k->adj=NULL;
  if(flag==0)
  {p->adj=k;
   l=k;
   flag++;
    }
  else
  {l->adj=k;
   l=k;
    }
  q=start;
  while(q!=NULL)
  {if(q->data==dat)
   k->next=q;
   q=q->next;
    }
  }
 p=p->next;
 }
}

void bfs()               //Function for Breadth First Traversal of Graph 
{
int q[20],i=1,j=0;
p=start;
while(p!=NULL)
{p->status=0;
 p=p->next;
 }
p=start;
q[0]=p->data;
p->status=1;
while(1)
{if(q[j]==0)
 break;
 p=start;
 while(p!=NULL)
 {if(p->data==q[j])
  break;
  p=p->next;
   }
 k=p->adj;
 while(k!=NULL)
 {q=k->next;
  if(q->status==0)
  {q[i]=q->data;
   q->status=1;
   q[i+1]=0;
   i++;
    }
  k=k->adj;
   }
 j++;
  }
j=0;
printf("Breadth First Search Results\n");
while(q[j]!=0)
{printf("%d ",q[j]);                     
 j++;
  }
}

void dfs()           // Function for Depth First Search(DFS) Traversal.
{
int stack[20],top=1;
printf("Depth First Search Results");
p=start;
while(p!=NULL)
{
p->status=0;
p=p->next;
}
p=start;
stack[0]=0;
stack[top]=p->data;
p->status=1;
while(1)
{
if(stack[top]==0)
break;
p=start;
while(p!=NULL)
{
if(p->data==stack[top])
break;
p=p->next;
}
printf("%d ",stack[top]);
top--;
k=p->adj;
while(k!=NULL)
{
q=k->next;
if(q->status==0)
{
top++;
stack[top]=q->data;
q->status=1;
}
k=k->adj;
}
}
}

void main()
{
int ch;
create();
while(1)
{
printf("1: DFS\n2: BSF\n0: Exit\nEnter your choice: ");
scanf("%d",&ch);
switch(ch)
{
case 1: dfs();
              break;
case 2: bfs();
              break;
case 0: exit(0);
              break;
default: printf("Incorrect choice!");
  }
 }
getch();
}  

